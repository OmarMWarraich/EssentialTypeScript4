// Type Guarding an Abstract Class
// Abstract classes are implemented as regular classes in the JS generated by the TS
// compiler. The drawback of this approach is that it is the TS compiler that prevents
// abstract classes from being instantiated, and this isn't carried over into the JS code,
// potentially allowing objects to be created from the abstract class. 
// However, this approach does mean that the instanceof keyword can be used to narrow types.
class Person {
    constructor(id, name, city) {
        this.id = id;
        this.name = name;
        this.city = city;
    }
    getDetails() {
        return `${this.name}, ${this.getSpecificDetails()}`;
    }
}
class Employee extends Person {
    constructor(id, name, dept, city) {
        super(id, name, city);
        this.id = id;
        this.name = name;
        this.dept = dept;
        this.city = city;
    }
    getSpecificDetails() {
        return `works in ${this.dept}`;
    }
}
class Customer {
    constructor(id, name, city, creditLimit) {
        this.id = id;
        this.name = name;
        this.city = city;
        this.creditLimit = creditLimit;
    }
}
let data = [
    new Employee("fvega", "Fidel Vega", "Sales", "Paris"),
    new Customer("ajones", "Alice Jones", "London", 500)
];
data.forEach(item => {
    if (item instanceof Person) {
        console.log(item.getDetails());
    }
    else {
        console.log(`Customer: ${item.name}`);
    }
});
// Above, Employee extends the abstract Person class, but the customer class does not. 
// The instanceof operator can be used to identify any object instantiated from a class
// that extends the abstract class, which allows narrowing in the Person | Customer 
// union used as the type for the array.
