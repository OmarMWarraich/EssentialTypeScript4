// Type Guarding an Interface

// There is no JS equivalent to interfaces, and no details of interfaces are included
// in the JS code generated by the TS compiler. This means that the instanceof keyword
// cannot be used to narrow interface types and typeguarding can be done only by checking
// for one or more properties that are defined by the interface.

interface Person {
    name: string;
    getDetails(): string;
}
    
interface Product {
    name: string;
    price: number;
}
class Employee implements Person {
    constructor(public name: string, public company: string) {
        // no statements required
    }

    getDetails() {
        return `${this.name} works for ${this.company}`;
    }
}

class SportsProduct implements Product {
    constructor(public name: string, public category: string, 
        public price: number) {
            // no statements required
        }
}

let data: (Person | Product)[] = [new Employee("Bob Smith", "Acme"),
    new SportsProduct("Running Shoes", "Running", 90.50),
    new Employee("Dora Peters", "BigCo")];

data.forEach(item => {
    if ("getDetails" in item) {
        console.log(`Person: ${item.getDetails()}`);
    } else {
        console.log(`Product: ${item.name}, ${item.price}`);
    }
});

// This listing uses the presence of the getDetails property to identify those objects
// that implement the Person interface, allowing the contents of the data array to be 
// narrowed to the Person or Product type.